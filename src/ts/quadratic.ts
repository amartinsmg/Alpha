const { expand, float, roots: findRoots, simplify } = require("algebrite");
import PlotPoits from "./plotpoints";

class QuadraticFunction {
  readonly formula: string;
  readonly plotPoits: PlotPoits;
  readonly roots: string[];
  readonly vertex: string;

  /**
    Constructor that receives coefficients of a quadratic function in string format,
    which may contain integers, decimals, or fractions , and returns an object with
    its properties.
    @param  a - Coefficient of the quadratic term.
    @param  b - Coefficient of the linear term.
    @param  c - Constant term.
    @returns Object containing the properties of the quadratic function:
      formula: string with the math formula in TeX format.
      plotPoints: array with the coordinates for the function's graph.
      roots: array with the real roots of the function in TeX format, or a message
             if the function has no real roots.
      vertex: object with the coordinates of the vertex of the parabola generated by
              the function, in TeX format.
  */

  public constructor(a: string, b: string, c: string) {
    const FORMULA = expand(`${a} * x^2 + (${b}) * x + (${c})`),
      ROOTS: any = findRoots(FORMULA),
      NUMBER_ROOTS: string[] = QuadraticFunction.numberFormatRoots(ROOTS),
      DELTA_FORMULA = `(${b})^2 - 4 * (${a}) * (${c})`,
      DELTA = parseFloat(float(DELTA_FORMULA).toString()),
      VERTEX_FORMULAS = [
        `-(${b})/(2 * (${a}))`,
        `-(${DELTA_FORMULA})/(4 * (${a}))`,
      ],
      VERTEX: any[] = VERTEX_FORMULAS.map((str) => simplify(str)),
      X_1: number =
        DELTA >= 0
          ? parseFloat(NUMBER_ROOTS[0])
          : parseFloat(float(VERTEX[0]).toString()),
      X_2: number | null = DELTA > 0 ? parseFloat(NUMBER_ROOTS[1]) : null;
    this.formula = `y = ${FORMULA.toLatexString()}`;
    this.roots =
      DELTA >= 0
        ? QuadraticFunction.formatRoots(ROOTS, NUMBER_ROOTS)
        : ["\\text{This quadratic function don't have any real zero.}"];
    this.vertex = `(${VERTEX.map((obj) => obj.toLatexString()).join(", ")})`;
    this.plotPoits = new PlotPoits(FORMULA.toString(), X_1, X_2);
  }

  /**
    Formats the roots found by Algebrite library and provided by rootsObj argument,
    using the numeric value of these roots provided in the numericRoots argument as
    an array of strings, and returns an array of strings with the formatted roots.
    @param rootsObj - An object containing the roots found by Algebrite library in
                      symbolic form.
    @param numericRoots - An array of strings containing the numeric value of the roots.
    @return - An array of strings with the formatted roots.
  */

  private static formatRoots(rootsObj: any, numbericRoots: string[]): string[] {
    const ROOTS: string[] = rootsObj
      .toLatexString()
      .replace(/\\(begin|end){bmatrix}/g, "")
      .split("&")
      .map((str: string) => str.trim())
      .map((str: string, i: number) => {
        const NUM = numbericRoots[i];
        if (str.match(/\\/)) {
          if (NUM.match(/\.{3}/))
            return `${str} \\approx ${NUM.replace("...", "")}`;
          else return `${str} = ${NUM}`;
        }
        return str;
      });
    if (ROOTS.length === 2) return ROOTS.map((e, i) => `{x}_{${i + 1}} = ${e}`);
    else if (ROOTS.length === 1) return [`x = ${ROOTS.pop()}`];
    else return [];
  }

  /**
     Convert roots to array of string with numeric values
     @param roots - Roots found by Algebrite     
     @returns - Array of strings with numeric values of roots
   */

  private static numberFormatRoots(roots: any): string[] {
    return float(roots)
      .toString()
      .match(/-?\d*\.?\d+(\.{3})?/g);
  }
}

export default QuadraticFunction;
